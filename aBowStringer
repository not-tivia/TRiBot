package scripts.aBowStringer;

import org.tribot.api.Clicking;
import org.tribot.api.General;
import org.tribot.api.Timing;
import org.tribot.api.input.Mouse;
import org.tribot.api.util.abc.ABCUtil;
import org.tribot.api2007.*;
import org.tribot.api2007.types.RSInterface;

import org.tribot.api2007.types.RSObject;
import org.tribot.api2007.types.RSTile;
import org.tribot.script.Script;
import org.tribot.script.ScriptManifest;
import org.tribot.script.interfaces.Arguments;
import org.tribot.script.interfaces.Painting;
import scripts.api.entityselector.Entities;
import scripts.api.entityselector.finders.prefabs.InterfaceEntity;
import scripts.api.entityselector.finders.prefabs.ObjectEntity;
import scripts.api.dax_api.api_lib.DaxWalker;
import scripts.api.dax_api.api_lib.models.DaxCredentials;
import scripts.api.dax_api.api_lib.models.DaxCredentialsProvider;
import scripts.api.dax_api.api_lib.models.RunescapeBank;
import scripts.api.util.ClientUtilities;

import java.awt.*;
import java.text.NumberFormat;
import java.util.HashMap;

import static scripts.api.items.ItemCheck.bankHasItem;
import static scripts.api.items.ItemCheck.hasItem;


@ScriptManifest(authors = { "adamhackz" }, category = "Crafting", name = "aBowStringer", description = "Simple bowstringer" , version = (1) )


public class Main extends Script implements Painting, Arguments {

    String args;
    private State scriptState = getState();

    private boolean continueRunning = true;
    private static final RSTile SPINNER_TILE = new RSTile(3209, 3213, 1);

    private final long START_TIME = System.currentTimeMillis();
    private String currentResource;
    private String currentFinishedItem;

    private int xpOnStart = Skills.getXP(Skills.SKILLS.CRAFTING);


    @Override
    public void passArguments(HashMap<String, String> hashMap) {
        if (hashMap.containsKey("custom_input")) {
            args = hashMap.get("custom_input");
        } else if (hashMap.containsKey("autostart")) {
            args = hashMap.get("autostart");
        }
    }

    private void daxStart() {
        DaxWalker.setCredentials(new DaxCredentialsProvider() {
            @Override
            public DaxCredentials getDaxCredentials() {
                return new DaxCredentials("sub_DPjXXzL5DeSiPf", "PUBLIC-KEY");
            }
        });
        Mouse.setSpeed(General.random(87,360));
    }

    private boolean onStart(){
      
            daxStart();
            ClientUtilities.minimizeClient();
            return true;
    }

    @Override
    public void run() {
        if (onStart()){
            while (continueRunning) {
                loop();
            }
        }
    }

    @Override
    public void onPaint(Graphics g) {
        NumberFormat.getInstance();
        long runtime = System.currentTimeMillis() - START_TIME;
        int xpGained = Skills.getXP(Skills.SKILLS.CRAFTING) - xpOnStart;
        int BowStrings = xpGained / 15;
        int BowStringsPerHour = (int) (BowStrings * 3600000d / runtime);

        g.drawString("Running for: " + Timing.msToString(runtime), 5, 80);
        g.drawString("State: " + scriptState, 5, 100);
        g.drawString("Resource " + currentResource, 5, 120);
        g.drawString("Finished product " + currentFinishedItem, 5, 140);
        g.drawString("Bowstrings made: " + BowStrings + " (" + BowStringsPerHour + "/h)", 5, 160);
        g.drawString("Run %" + run_at, 5, 180);

    }

    // this is an instanced class you can use throughout the whole script.
    private ABCUtil abcInstance = new ABCUtil();

    private int run_at = abcInstance.generateRunActivation();

      private void runCheck(){
        if (!Game.isRunOn() && Game.getRunEnergy() >= run_at) {
            if (Options.setRunOn(true)){
                Timing.waitCondition(() -> Options.isRunEnabled(), General.random(600, 1100));
                run_at = abcInstance.generateRunActivation();
            }
        }
    }



    private int loop() {
        scriptState = getState();
        General.sleep(50);

        switch (scriptState) {
            case WITHDRAW:
                if (Banking.isBankScreenOpen()) {
                    if (Inventory.getAll().length < 1) {
                        if (bankHasItem(currentResource)) {
                            if (Banking.withdraw(0, currentResource)) {
                                Timing.waitCondition(() -> hasItem(currentResource), General.random(600, 1100));

                            }
                        } else {
                            General.println("We are out of :" + currentResource);
                            continueRunning = false;
                        }
                    } else {
                        Banking.depositAll();
                        Timing.waitCondition(() -> Inventory.getAll().length < 1, General.random(600, 1100));

                    }

                } else {
                    if (Banking.openBank()){
                        Timing.waitCondition(() -> Banking.isBankScreenOpen(), General.random(600, 1100));
                    }
                }

                break;

            case WALK_TO_BANK:
                runCheck();
                if (DaxWalker.walkToBank(RunescapeBank.LUMBRIDGE_TOP)){
                    Timing.waitCondition(() -> !Player.isMoving(), General.random(600, 1100));
                }

                break;

            case DEPOSIT:
                if (isAtBank()){
                    if (Banking.isBankScreenOpen()){
                        Banking.depositAll();
                        Timing.waitCondition(() -> Inventory.getAll().length < 1, General.random(600, 1100));
                    } else {
                        if (Banking.openBank()){
                            Timing.waitCondition(() -> Banking.isBankScreenOpen(), General.random(600, 1100));
                        }
                    }
                } else {
                    if (DaxWalker.walkToBank(RunescapeBank.LUMBRIDGE_TOP)){
                        Timing.waitCondition(() -> !Player.isMoving(), General.random(600, 1100));
                    }
                }

                break;

            case ANIMATING:

                break;

            case USE_WHEEL:
                clickOnWheel();
                break;

            case WALK_TO_WHEEL:
                runCheck();
                if (SPINNER_TILE.isOnScreen() && SPINNER_TILE.isClickable()){
                    if (!Player.isMoving()){
                        if (PathFinding.canReach(SPINNER_TILE, false)){
                            if (Walking.clickTileMS(SPINNER_TILE, "Walk here")) {
                                Timing.waitCondition(() -> !Player.isMoving(), General.random(1100, 2400));
                            }
                        } else {
                            if (DaxWalker.walkTo(SPINNER_TILE.getPosition())){
                                Timing.waitCondition(() -> !Player.isMoving(), General.random(600, 1100));
                            }
                        }
                    }
                    //Player.getPosition().equals(SPINNER_TILE)
                } else {
                    if (DaxWalker.walkTo(SPINNER_TILE.getPosition())){
                        Timing.waitCondition(() -> !Player.isMoving(), General.random(600, 1100));
                    }
                }
                break;

            case END:
                continueRunning = false;
                break;

        }
        return 50;
    }



    public enum State {
        DEPOSIT, ANIMATING, WITHDRAW, WALK_TO_BANK, WALK_TO_WHEEL, USE_WHEEL, IDLE, END
    }

    private State getState() {
        RSObject spinner = Entities.find(ObjectEntity::new)
                .actionsEquals("Spin")
                .sortByDistance()
                .getFirstResult();

        if (Skills.getCurrentLevel(Skills.SKILLS.CRAFTING) < CraftingItem.BOWSTRING.requiredLevel) {
            currentResource = CraftingItem.BALLOFWOOL.resourceName;
            currentFinishedItem = CraftingItem.BALLOFWOOL.finishedName;
        } else {
            currentResource = CraftingItem.BOWSTRING.resourceName;
            currentFinishedItem = CraftingItem.BOWSTRING.finishedName;
        }

        if (isAtBank()) {
            if (Banking.isBankScreenOpen()) {
                if (hasItem(currentResource)) {
                    if (hasItem(currentFinishedItem)) {
                        return State.DEPOSIT;
                    } else {
                        return State.WALK_TO_WHEEL;
                    }
                } else {
                    if (bankHasItem(currentResource)) {
                        return State.WITHDRAW;
                    } else {
                        // Change this later to end script or restock
                        return State.END;
                    }
                }
            } else {
                if (hasItem(currentResource)) {
                    return State.WALK_TO_WHEEL;
                } else {
                    if (hasItem(currentFinishedItem)) {
                        return State.DEPOSIT;
                    } else {
                        if (!hasItem(currentResource) && !hasItem(currentFinishedItem)){
                            return State.WITHDRAW;
                        }
                    }
                }

            }
        } else {
            if (hasItem(currentResource)) {
                if (spinner!=null && spinner.isOnScreen()) {
                    if (continuouslyAnimating()) {
                            return State.ANIMATING;
                    } else {
                        if (hasItem(currentResource)){
                            return State.USE_WHEEL;
                        } else {
                            return State.IDLE;
                        }

                    }
                } else {
                    return State.WALK_TO_WHEEL;
                }
            } else {
                if (hasItem(currentFinishedItem)) {
                    if (continuouslyAnimating()) {
                        return State.ANIMATING;
                    } else {
                        return State.DEPOSIT;
                    }
                } else {
                    return State.WALK_TO_BANK;
                }
            }
        }
        return State.IDLE;
    }


        private enum CraftingItem {

            BOWSTRING("Flax", "Bow String", 10),
            BALLOFWOOL("Wool", "Ball of Wool", 1);

            final String resourceName;
            final String finishedName;
            final int requiredLevel;

            static final CraftingItem[] CraftingItem = {BOWSTRING, BALLOFWOOL};

            CraftingItem(String resourceName, String finishedName, int requiredLevel) {
                this.resourceName = resourceName;
                this.finishedName = finishedName;
                this.requiredLevel = requiredLevel;
            }

            private String getResourceName() {
                return resourceName;
            }

            private String getFinalName() {
                return finishedName;
            }

            private int getRequiredLevel() {
                return requiredLevel;
            }

        }


        private boolean isAtBank () {
            RSObject[] bank = Objects.findNearest(10, "Bank booth", "Bank chest", "Banker");
            return bank.length > 0 && bank[0] != null;
        }

        private void clickOnWheel () {

            RSObject spinner = Entities.find(ObjectEntity::new)

                    .actionsEquals("Spin")
                    .sortByDistance()
                    .getFirstResult();

            RSInterface bowstring = Entities.find(InterfaceEntity::new)
                    .inMaster(270)
                    .componentNameContains("Bow String")
                    .getFirstResult();

            RSInterface ballofwool = Entities.find(InterfaceEntity::new)
                    .inMaster(270)
                    .componentNameContains("Ball of Wool")
                    .getFirstResult();

            if (spinner!=null){
                if (bowstring == null){
                    if (Clicking.click("Spin",spinner)){
                        Timing.waitCondition(() -> bowstring!=null, General.random(1200, 2100));

                    }
                } else {
                    if (currentResource == "Flax") {
                        if (Clicking.click(bowstring)) {
                            Timing.waitCondition(() -> continuouslyAnimating(), General.random(1200, 2100));

                        }
                    } else {
                        if (currentResource == "Wool"){
                            if (Clicking.click(ballofwool)) {
                                Timing.waitCondition(() -> continuouslyAnimating(), General.random(1200, 2100));
                            }
                        }
                    }
                }
            }

        }

        public static boolean continuouslyAnimating () {
            return Timing.waitCondition(() -> Player.getAnimation()!=-1, General.random(1200, 2100));
        }

}




